Akamai EdgeAuth Token 2.0

LICENSE

Copyright (c) 2010, Akamai Technologies, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Akamai Technologies nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AKAMAI TECHNOLOGIES BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


OVERVIEW

The EdgeAuth Token 2.0  package is designed to help you incorporate version
2.0 Edge Authorization / distributed authentication tokens into your site.

An EdgeAuth Token version 2.0 contains a few required and a number of optional
fields which come together to provide a solution for both message-passing and
to communicate authorization. These fields are combined into a token string
and then run through a few possible HMAC algorithms (MD5, SHA1 & SHA256) along
with a shared key to produce a token.  This token is then included in a link
that should be token protected, in a manner defined by the customer
configuration. A brief description of these fields is as follows:

Required:
	* expiration    A long containing the time (in seconds-since-epoch format)
                    when the token is no longer valid.

	* acl           ONLY REQUIRED WHEN NOT USING URL. The ACL field can include
                    wildcards and makes the token valid only for urls that fit
                    into one of the provided specifications.

	* url           ONLY REQUIRED WHEN NOT USING ACL. The URL field is included
                    only in the HMAC calculation and does not appear in the
                    token string.  Locks the token to a single url.

	* key           Used only in the calculation of the HMAC.  This value is
                    shared between the edge configuration and the system
                    producing the token and should not be exposed to the end
                    user.

	* hmac          This value is calculated and included in the final token.

Optional:
    * starttime     A long containing the time (in seconds-since-epoch format)
                    when the token should become valid

	* salt          A string which is not included in the token string itself
                    but is included in the token HMAC calculation.  This can
                    often be used to verify some aspect of the user-agent that
                    is present when the agent uses the token.

	* data          A string which is opaque and is carried in the token

	* sessionid     A string which denotes some kind of session.  Can be used
                    as a second data field.

	* ip            Enforces that the token be restricted to a specific IP
                    address

All packages included in this SDK make some use of the above fields. Each
package includes both a library and a command-line application as well as a
description of any dependencies or specific usage notes.


CONTENTS

This archive contains the following folders, each of which contains further
information on making use of the individual libraries:

java
    A java implementation. Contains an Ant-buildable java implementation that
    can be used as both a library and a command-line application.

python
    A python implementation. Contains one file that can be used as either a
    library or a command-line application.

ruby
    A ruby implementation. Contains two files, one library and the other a CLI.

perl
    A perl implementation. Contains two files, one a perl module and the other
    a CLI.

c
    A C implementation suitable for inclusion in C/C++ projects. Contains one
    file that can be compiled as both a library or a command-line application.

c#
    A C# implementation contains one file that can be compiled as both a
    library and command-line application.

